import Head from 'next/head'
import { useEffect, useMemo, useRef } from 'react'
import { useClockStore } from '@/lib/store'
import { css } from '@emotion/react'
import HandBox from '@/components/HandBox'
import { createPortal } from 'react-dom'
import {
  getHourFromSeconds,
  getMinuteFromSeconds,
  getSecondFromSeconds,
  useMounted,
} from '@/lib/utils'
import styled from '@emotion/styled'

interface RefObject {
  current: () => void
}

const HomePage = () => {
  const currentTime = useClockStore((state) => state.currentTime)
  const isHover = useClockStore((state) => state.isHover)
  const position = useClockStore((state) => state.position)
  const isAnimating = useClockStore((state) => state.isAnimating)
  const setCurrentTime = useClockStore((state) => state.setCurrentTime)
  const setIsHover = useClockStore((state) => state.setIsHover)
  const setPosition = useClockStore((state) => state.setPosition)
  const setIsAnimating = useClockStore((state) => state.setIsAnimating)
  const currentHour = getHourFromSeconds(currentTime)
  const currentMinute = getMinuteFromSeconds(currentTime)
  const currentSecond = getSecondFromSeconds(currentTime)
  const savedCallback: RefObject = useRef(null)
  const callbackFunc = () => setCurrentTime(currentTime + 1)
  const isMounted = useMounted()

  const setHourDeg = useMemo(() => {
    const hourDeg = (currentHour >= 12 ? currentHour - 12 : currentHour) * 30
    const minuteDeg = (30 / 60) * currentMinute
    return hourDeg + minuteDeg
  }, [currentHour, currentMinute])

  const setMinuteDeg = useMemo(() => {
    return currentMinute * 6
  }, [currentMinute])

  const setSecondDeg = () => currentSecond * 6

  const handleMouseOver = () => setIsHover(true)
  const handleMouseMove = (e) => {
    if (isAnimating) return

    setIsAnimating(true)
    return requestAnimationFrame(() => {
      setPosition({ x: e.clientX, y: e.clientY })
      setIsAnimating(false)
    })
  }
  const handleMouseOut = () => setIsHover(false)

  useEffect(() => {
    savedCallback.current = callbackFunc
  })

  useEffect(() => {
    const now = new Date()
    const originalTime =
      now.getSeconds() + now.getMinutes() * 60 + now.getHours() * 60 * 60

    let intervalAddSecond
    if (currentTime <= 0) setCurrentTime(originalTime)
    intervalAddSecond = setInterval(() => savedCallback.current(), 1000)

    return () => clearInterval(intervalAddSecond)
  }, [])

  return (
    <>
      <Head>
        <title>Analog Clock</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main css={WrapperCSS}>
        <h1>ANALOG CLOCK</h1>
        <div
          css={ClockCSS}
          onMouseOver={handleMouseOver}
          onMouseOut={handleMouseOut}
          onMouseMove={handleMouseMove}
        >
          <span className={'vertical-guide'}></span>
          <span className={'horizontal-guide'}></span>
          <HandBox degree={setHourDeg} type={'short'} />
          <HandBox degree={setMinuteDeg} type={'medium'} />
          <HandBox degree={setSecondDeg()} type={'long'} />
        </div>

        {isMounted && isHover ? (
          createPortal(
            <OverlayCSS x={position.x} y={position.y}>
              <p>
                현재 시간 <br />{' '}
                {currentHour < 10 ? '0' + currentHour : currentHour}:
                {currentMinute < 10 ? '0' + currentMinute : currentMinute}:
                {currentSecond < 10 ? '0' + currentSecond : currentSecond}
              </p>
            </OverlayCSS>,
            document.getElementById('overlay')!
          )
        ) : (
          <></>
        )}
      </main>
    </>
  )
}

const WrapperCSS = css`
  overflow: hidden;
  display: flex;
  flex-direction: column;
  height: 100%;
  text-align: center;

  h1 {
    font-size: 36px;
    color: #fff;
    margin-top: 72px;
  }

  p {
    font-size: 20px;
    color: #fff;
  }
`

const ClockCSS = css`
  position: relative;
  width: 400px;
  height: 400px;
  margin: 48px auto 0;
  background-color: #fff;
  border-radius: 50%;

  & > span {
    position: absolute;
    display: block;
    width: 100%;
    height: 100%;
    pointer-events: none;

    &:before,
    &:after {
      position: absolute;
      display: block;
      width: 30px;
      height: 30px;
      font-size: 20px;
      font-weight: 900;
      text-align: center;
    }
  }

  .vertical-guide {
    &:before {
      top: 10px;
      left: 50%;
      content: '12';
      transform: translateX(-50%);
    }
    &:after {
      bottom: 10px;
      left: 50%;
      content: '6';
      transform: translateX(-50%);
    }
  }
  .horizontal-guide {
    &:before {
      top: 50%;
      right: 10px;
      content: '3';
      transform: translateY(-50%);
    }
    &:after {
      top: 50%;
      left: 10px;
      content: '9';
      transform: translateY(-50%);
    }
  }
`

const dynamicStyle = (props) => css`
  left: ${props.x ? `${props.x}` : 0}px;
  top: ${props.y ? `${props.y}` : 0}px;
`

const OverlayCSS = styled.div<{ x: number; y: number }>`
  pointer-events: none;
  position: fixed;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100px;
  height: 60px;
  font-size: 20px;
  font-weight: 900;
  color: #fff;
  text-align: center;
  line-height: 1.3;
  padding: 16px;
  background-color: rgba(0, 139, 139, 0.7);
  border-radius: 4px;
  transform: translateY(-100%);
  ${dynamicStyle};
`

export default HomePage
